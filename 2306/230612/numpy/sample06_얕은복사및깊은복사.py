import numpy as np

'''
    얕은 복사(주소값 복사) vs 깊은 복사(실제값 복사)
    
    1. 기본 python
        예) x = [1, 2, 3]
            x2 = x # 얕은 복사, 따라서 x2에서 값을 변경하면 x도 변경이 됨.
    
        * python의 깊은 복사 3가지 방법
        x3 = x[:]
        x3 = x.copy()
        x3 = list(x)
        # x3에서 값을 변경해도 원본인 x는 영향을 안 받는다.
        
    2. numpy
        - [:] numpy에서 슬라이싱 처리는 얕은 복사로 처리함.
            그런데 주소값은 다르다. 내부적으로 뷰 형태로 연결되어 있음.
            (주소를 따라가면 서로 연결되어있다.)
            따라서 값을 변경하면 원본값도 변경이 됨.
            
            이유 : numpy에서는 많은 데이터가 저장되어있는 배열을 빈번하게 슬라이싱한다.
            깊은 복사 처리하면 매번 size가 큰 배열을 생성해야하는데 부담이 커서 얕은 복사 처리한다.
        
        * 깊은 복사
        - np.copy(ndarray) 또는 ndarray.copy()
    
'''
# 1. 기본 python
x = [1, 2, 3]
x2 = x # 얕은 복사
print(id(x), id(x2)) # 2494018517568 2494018517568
x2[0]=100
print(x, x2) # [100, 2, 3] [100, 2, 3]
             # x2에서 값을 변경하면 x도 변경이 됨

# 깊은 복사
# x3 = x[:]
# x3 = x.copy()
x3 = list(x)
print(id(x), id(x3)) # 2163611171840 2163611172416
x3[1]=100
print(x, x3) # [100, 2, 3] [100, 100, 3]
             # x3에서 값을 변경해도 x는 영향을 받지 않음

########################################################
# numpy 얕은 복사
arr = np.array([1, 2, 3])
print(arr)

arr2 = arr[:] # numpy는 얕은 복사
print(id(arr), id(arr2)) # 2160853259728 2160853259824 -> 얕은 복사지만 주소값이 다름

arr2[0]=100 # 주소값은 다르지만 내부적으로 연결되어 있어 값을 변경하면 원본값도 변경된다.
print(arr, arr2) # [100   2   3] [100   2   3]

# numpy 깊은 복사
arr3 = np.copy(arr)
print(id(arr), id(arr3)) # 2816628757968 2816769327824

arr3[1]=200
print(arr, arr3) # [100   2   3] [100 200   3]
                 # 값을 변경해도 원본값은 영향을 받지 않음